// src/app/api/tokenService.js
import axios from 'axios';

// La URL base para las Next.js API Routes es la raíz de tu dominio
const API_BASE_PATH = '/api'; // Será http://localhost:3000/api en desarrollo de Next.js

const tokenService = {
    // Obtener el precio de una acción
    getPricing: async (actionName, userEmail) => {
        try {
            const response = await axios.get(`${API_BASE_PATH}/pricing`, {
                params: { actionName, email: userEmail }
            });
            return response.data.price;
        } catch (error) {
            console.error('Error fetching pricing:', error.response ? error.response.data : error.message);
            throw new Error(error.response?.data?.message || 'Failed to fetch pricing.');
        }
    },

    // Obtener los tokens del usuario
    getUserTokens: async (userEmail) => {
        try {
            const response = await axios.get(`${API_BASE_PATH}/user-tokens`, {
                params: { email: userEmail }
            });
            return response.data.tokens;
        } catch (error) {
            console.error('Error fetching user tokens:', error.response ? error.response.data : error.message);
            throw new Error(error.response?.data?.message || 'Failed to fetch user tokens.');
        }
    },

    // Descontar tokens
    useTokens: async (userEmail, price) => {
        try {
            // El PUT a /api/user-tokens/route.js maneja el descuento
            const response = await axios.put(`${API_BASE_PATH}/user-tokens`, {
                email: userEmail,
                price
            });
            return response.data; // { success: true, newBalance: ... }
        } catch (error) {
            console.error('Error deducting tokens:', error.response ? error.response.data : error.message);
            throw new Error(error.response?.data?.message || 'Failed to deduct tokens.');
        }
    },

    // Registrar operación de token
    recordOperation: async (userEmail, price, action) => {
        try {
            const response = await axios.post(`${API_BASE_PATH}/user-tokens/operations`, {
                email: userEmail,
                price,
                action
            });
            return response.data.operationId;
        } catch (error) {
            console.error('Error recording operation:', error.response ? error.response.data : error.message);
            throw new Error(error.response?.data?.message || 'Failed to record operation.');
        }
    },

    // Revertir operación de token
    revertOperation: async (operationId, userEmail) => {
        try {
            const response = await axios.put(`${API_BASE_PATH}/user-tokens/operations/${operationId}/revert`, null, {
                params: { email: userEmail }
            });
            return response.data.revertedPrice;
        } catch (error) {
            console.error('Error reverting operation:', error.response ? error.response.data : error.message);
            throw new Error(error.response?.data?.message || 'Failed to revert operation.');
        }
    },

    // Añadir tokens (usado en rollback)
    addTokens: async (userEmail, price) => {
        try {
            const response = await axios.put(`${API_BASE_PATH}/user-tokens/add`, {
                email: userEmail,
                price
            });
            return response.data; // { success: true, newBalance: ... }
        } catch (error) {
            console.error('Error adding tokens:', error.response ? error.response.data : error.message);
            throw new Error(error.response?.data?.message || 'Failed to add tokens.');
        }
    },

    // --- APIs de Willi (Simuladas) ---
    callWilliAPI: async (actionName, data, userEmail) => {
        try {
            // La ruta ya contiene el actionName para Next.js API Routes
            const response = await axios.post(`${API_BASE_PATH}/willi/${actionName}`, data, {
                params: { email: userEmail }
            });
            return response.data;
        } catch (error) {
            console.error(`Error calling Willi API for ${actionName}:`, error.response ? error.response.data : error.message);
            throw new Error(error.response?.data?.message || `Failed to generate content for ${actionName}.`);
        }
    }
};

export default tokenService;